<style lang="less">
.search-container {
    width: 100%;
    padding: 20rpx 0;
    background-color: #ffffff;
    box-shadow: 0 1rpx 1rpx #a8a7a7;
    position: fixed;
    top: 147rpx;
    z-index: 99;
}

.search_content {
    width: 690rpx;
    height: 70rpx;
    margin: 0 auto;
    padding: 0 30rpx;
    color: #8c877e;
    text-align: left;
    background: #e5e5e5;
    opacity: 0.5;
    border-radius: 52rpx;
    box-sizing: border-box;
}

.search-icon {
    height: 70rpx;
    line-height: 70rpx;
    padding: 20rpx 0;
    box-sizing: border-box;
    vertical-align: top;
}

.search_input {
    font-size: 32rpx;
    line-height: 70rpx;
    display: inline-block;
    vertical-align: top;
    margin-left: 20rpx;
}

::-webkit-scrollbar {
    width: 0;
    height: 0;
    color: transparent;
}

.cs-fix {
    width: 150rpx;
    height: 100vh;
    padding-top: 255rpx;
    box-sizing: border-box;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 10;
    .cate {
        height: 120rpx;
        text-align: center;
        line-height: 120rpx;
        font-size: 30rpx;
        border-right: 1px solid #bfbfbf;
        border-bottom: 1px solid #bfbfbf;
        background: #ffffff;
        box-sizing: border-box;
    }
    .selected {
        color: #b28850;
        border-right: none;
        background-color: #fafafa;
    }
}

.category-content {
    width: 100%;
    height: 100vh;
    padding-top: 255rpx;
    box-sizing: border-box;
    .cs-fixed {
        position: fixed;
        top: 0;
        left: 0;
    }
    .products {
        width: 600rpx;
        height: auto;
        margin-left: 150rpx;
        padding: 0 30rpx 30rpx 30rpx;
        box-sizing: border-box;
        .product {
            width: 100%;
            height: 60rpx;
            box-sizing: border-box;
            font-size: 32rpx;
            line-height: 60rpx;
            margin-top: 30rpx;
            display: block;
        }
        .productBox {
            width: auto;
            max-width: 580rpx;
            height: 60rpx;
            box-sizing: border-box;
            font-size: 28rpx;
            line-height: 60rpx;
            margin: 10rpx 0;
            padding: 0 20rpx;
            border: 1rpx solid #d1c0a5;
            border-radius: 30rpx;
            margin-right: 20rpx;
            background: #ffffff;
            display: inline-block;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }
    }
}
</style>
<template>
    <view class="container">
        <navBar navTitle="分类"></navBar>
        <view class="search-container">
            <navigator class="search_content" url="/pages/search">
                <icon type="search" size="15" class="search-icon" />
                <view class="search_input">搜索感兴趣的内容</view>
            </navigator>
        </view>

        <scroll-view class="cs-fix" scroll-y="true" scroll-into-view="{{cScrollInTo}}" scroll-with-animation="true">
            <view>
                <repeat for="{{categories}}" key="index">
                    <view class="cate {{currentCategory==index?'selected':''}}" id="{{item.id}}" @tap.stop="clickScrollInTo" data-id="{{item.id}}">{{item.name}}</view>
                </repeat>
            </view>
        </scroll-view>

        <scroll-view class="category-content" scroll-into-view="{{scrollInTo}}" bindscroll="scrolling" scroll-with-animation="true" scroll-y="true">
            <view class="products" id="prds">
                <repeat for="{{categories}}" key="index" item="item" index="index">
                    <view class="product" id="{{item.id}}">{{item.name}}</view>
                    <repeat for="{{item.labels}}" item="itm" index="idx" key="idx">
                        <view class="productBox" @tap.stop="navToCategory({{itm}})">{{itm}}</view>
                    </repeat>
                </repeat>
            </view>
        </scroll-view>
    </view>
</template>

<script>
import wepy from 'wepy';
import NavBar from '@/components/navBar';
import api from '@/api/api';

export default class Category extends wepy.page {
    config = {};
    components = {
        navBar: NavBar
    };

    async onLoad() {
        let self = this;
        let res = await api.getCategory();
        console.log('-------------');
        console.log(res.data);
        console.log('-------------');
        self.categories = res.data;
        self.$apply();

        var query = wx.createSelectorQuery();
        var top = 0;
        query
            .select('.products')
            .boundingClientRect(rect => {
                top = rect.top;
                console.log(top);
            })
            .exec();
        self.productsTop = [];
        query
            .selectAll('.product')
            .boundingClientRect(rect => {
                rect.forEach((item, index) => {
                    console.log(item.top);
                    self.productsTop.push({ top: item.top - top });
                });
            })
            .exec();
        console.log(self.productsTop);
        self.$apply();
    }

    data = {
        categories: [],
        // 当前分类的索引
        currentCategory: 0,
        // 每个分类距离顶部的高度的数组
        productsTop: [],
        categoryTop: 10000,
        // 用于存储每次滚动结束之后的距离, 可用来判断滚动的方向
        moveStartPos: 0,
        // 点击分类的名称, 用于点击跳转
        cScrollInTo: '',
        scrollInTo: ''
    };

    computed = {};

    // onPageScroll (e) { s
    onScrollViewScroll(e) {
        // 当前滚动的距离
        let scrollTop = e.scrollTop;
        // moveStartPos记录着上一次滚动完成时的位置, 用于判断滚动方向
        // 如果现在的滚动距离大于moveStartPos说明正在往下滚动
        if (scrollTop > this.moveStartPos) {
            this.moveStartPos = scrollTop;
            // 遍历每个商品距离顶部的距离
            this.productsTop.forEach((item, index) => {
                // 如果滚动的距离大于某个商品到顶部的距离说明该商品到了顶部, 减10是为了减少触发距离
                if (scrollTop > item.top - 10) {
                    // 当前分类的索引小于满足条件的商品索引就赋值, 跳到下一个分类
                    if (this.currentCategory < index) {
                        this.currentCategory = index;
                        this.cScrollInTo = this.categories[
                            this.currentCategory
                        ].id;
                    }
                }
            });
            this.$apply();
            // 如果现在的滚动距离小于moveStartPos说明正在往上滚动
        } else if (scrollTop < this.moveStartPos) {
            this.moveStartPos = scrollTop;
            this.productsTop.forEach((item, index) => {
                if (scrollTop < item.top - 10) {
                    if (this.currentCategory >= index) {
                        this.currentCategory = index ? index - 1 : index;
                        this.cScrollInTo = this.categories[
                            this.currentCategory
                        ].id;
                    }
                }
            });
            this.$apply();
        }
    }

    methods = {
        // scroll-view滚动时触发
        scrolling(e) {
            //将当前的距离传入
            this.onScrollViewScroll({ scrollTop: e.detail.scrollTop });
        },
        // 点击分类跳转
        clickScrollInTo(e) {
            this.scrollInTo = e.currentTarget.dataset.id;
            this.$apply();
        },

        navToCategory(label, e) {
            wx.navigateTo({
                url: '/pages/label/label?id=' + label
            });
        }
    };

    onReady() {}
}
</script>