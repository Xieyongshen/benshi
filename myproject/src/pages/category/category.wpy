<template>
    <view>
        <navBar navTitle="分类"></navBar>
        <view class="search-container">
            <navigator class="search_content" url="/pages/search">
                <icon type="search" size="15" class="search-icon" />
                <view class="search_input">搜索感兴趣的内容</view>
            </navigator>
        </view>

        <view class="cs-fix">
            <view>
                <repeat for="{{categories}}" key="index">
                    <view class="cate {{currentCategory==index?'selected':''}}" @tap.stop="clickScrollInTo" data-id="{{item.id}}">{{item.name}}</view>
                </repeat>
            </view>
        </view>

        <scroll-view class="category-content" scroll-into-view="{{scrollInTo}}" bindscroll="scrolling" scroll-with-animation="true" scroll-y="true">
            <view class="products" id="prds">
                <repeat for="{{categories}}" key="index" item="item" index="index">
                    <view class="product" id="{{item.id}}">{{item.name}}</view>
                    <view class="productBox" wx:for="{{item.lables}}" wx:for-item="itm" wx:key="idx" wx:for-index="idx">
                        {{item.lables[idx]}}
                    </view>
                </repeat>
            </view>
        </scroll-view>
    </view>
</template>

<script>
import wepy from 'wepy';
import NavBar from '@/components/navBar';

export default class categoryScroll extends wepy.page {
    config = {};
    components = {
        navBar: NavBar
    };

    data = {
        categories: [
            {
                id: 'hot',
                name: '热门分类',
                lables: [
                    'TOEFL',
                    'IELTS',
                    '围棋',
                    '3DMax',
                    '留学经验',
                    '拍照摄影',
                    '茶艺',
                    '收纳'
                ]
            },
            {
                id: 'language',
                name: '外语类',
                lables: ['TOEFL', 'IELTS', '日语', '德语', '法语']
            },
            {
                id: 'talent',
                name: '才艺类',
                lables: [
                    '象棋',
                    '书法',
                    '围棋',
                    '国画',
                    '素描',
                    '街舞',
                    '茶艺',
                    '插花',
                    '游泳',
                    '潜水'
                ]
            },
            {
                id: 'skill',
                name: '生活技能',
                lables: ['烹调方法', '整理', '缝纫', '盥洗', '具体菜系']
            },
            {
                id: 'knowledge',
                name: '专业知识',
                lables: [
                    '法学',
                    '哲学',
                    '文学',
                    '数学',
                    '物理',
                    '计算机',
                    '土木工程',
                    '临床医学'
                ]
            },
            {
                id: 'experience',
                name: '经验分享',
                lables: ['留学经验', '考研经验', '创业经验', '面试经验']
            }
        ],
        // 当前分类的索引
        currentCategory: 0,
        // 每个分类距离顶部的高度的数组
        productsTop: [],
        categoryTop: 10000,
        // 用于存储每次滚动结束之后的距离, 可用来判断滚动的方向
        moveStartPos: 0,
        // 点击分类的名称, 用于点击跳转
        scrollInTo: ''
    };

    computed = {};

    // onPageScroll (e) { s
    onScrollViewScroll(e) {
        // 当前滚动的距离
        let scrollTop = e.scrollTop;
        // moveStartPos记录着上一次滚动完成时的位置, 用于判断滚动方向
        // 如果现在的滚动距离大于moveStartPos说明正在往下滚动
        if (scrollTop > this.moveStartPos) {
            this.moveStartPos = scrollTop;
            // 遍历每个商品距离顶部的距离
            this.productsTop.forEach((item, index) => {
                // 如果滚动的距离大于某个商品到顶部的距离说明该商品到了顶部, 减10是为了减少触发距离
                if (scrollTop > item.top - 10) {
                    // 当前分类的索引小于满足条件的商品索引就赋值, 跳到下一个分类
                    if (this.currentCategory < index) {
                        this.currentCategory = index;
                    }
                }
            });
            this.$apply();
            // 如果现在的滚动距离小于moveStartPos说明正在往上滚动
        } else if (scrollTop < this.moveStartPos) {
            this.moveStartPos = scrollTop;
            this.productsTop.forEach((item, index) => {
                if (scrollTop < item.top - 10) {
                    if (this.currentCategory >= index) {
                        this.currentCategory = index ? index - 1 : index;
                    }
                }
            });
            this.$apply();
        }
    }

    methods = {
        // scroll-view滚动时触发
        scrolling(e) {
            //将当前的距离传入
            this.onScrollViewScroll({ scrollTop: e.detail.scrollTop });
        },
        // 点击分类跳转
        clickScrollInTo(e) {
            this.scrollInTo = e.currentTarget.dataset.id;
            this.$apply();
        }
    };

    onReady() {
        // 页面准备完成之后获取每个分类距离顶部的高度, 存储在数组productsTop中
        var query = wx.createSelectorQuery();
        this.productsTop = [];
        query.selectAll('.product').boundingClientRect(rect => {
            rect.forEach((item, index) => {
                this.productsTop.push({ top: item.top - 108 });
                console.log(item.top - 108);
            });
            this.$apply();
        });

        query
            .selectAll('.cs-fix')
            .boundingClientRect(rect => {
                this.categoryTop = rect[0].top;
                this.$apply();
            })
            .exec();
    }
}
</script>
<style lang="less">
page {
    background: #fafafa;
}

.navBar {
    position: fixed;
    top: 0;
    z-index: 98;
}

.search-container {
    width: 100%;
    padding: 20rpx 0;
    background-color: #ffffff;
    border-bottom: 1rpx solid #d2d2d2;
    position: fixed;
    top: 147rpx;
    z-index: 99;
}

.search_content {
    width: 650rpx;
    height: 70rpx;
    margin: 0 auto;
    padding: 0 30rpx;
    color: #8c877e;
    text-align: left;
    background: #e5e5e5;
    opacity: 0.5;
    border-radius: 52rpx;
    box-sizing: border-box;
}

.search-icon {
    height: 70rpx;
    line-height: 70rpx;
    padding: 20rpx 0;
    box-sizing: border-box;
    vertical-align: top;
}

.search_input {
    font-size: 32rpx;
    line-height: 70rpx;
    display: inline-block;
    vertical-align: top;
    margin-left: 20rpx;
}

::-webkit-scrollbar {
    width: 0;
    height: 0;
    color: transparent;
}

.cs-fix {
    width: 150rpx;
    height: auto;
    background: #ffffff;
    box-sizing: border-box;
    position: fixed;
    top: 255rpx;
    left: 0;
    z-index: 10;
    .cate {
        height: 120rpx;
        text-align: center;
        line-height: 120rpx;
        font-size: 30rpx;
        border-right: 1px solid #bfbfbf;
        border-bottom: 1px solid #bfbfbf;
        box-sizing: border-box;
    }
    .selected {
        color: #b28850;
        border-right: none;
        background-color: #fafafa;
    }
}

.category-content {
    width: 100%;
    height: 100vh;
    padding-top: 255rpx;
    box-sizing: border-box;
    .cs-fixed {
        position: fixed;
        top: 0;
        left: 0;
    }
    .products {
        width: 600rpx;
        height: auto;
        margin-left: 150rpx;
        padding: 0 30rpx 30rpx 30rpx;
        box-sizing: border-box;
        .product {
            width: 100%;
            height: 60rpx;
            box-sizing: border-box;
            font-size: 32rpx;
            line-height: 60rpx;
            margin-top: 30rpx;
            display: block;
        }
        .productBox {
            width: auto;
            max-width: 580rpx;
            height: 60rpx;
            box-sizing: border-box;
            font-size: 28rpx;
            line-height: 60rpx;
            margin: 10rpx 0;
            padding: 0 20rpx;
            border: 1rpx solid #d1c0a5;
            border-radius: 30rpx;
            margin-right: 20rpx;
            background: #ffffff;
            display: inline-block;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }
    }
}
</style>